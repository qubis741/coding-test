{"version":3,"sources":["domain/order/actions.ts","domain/product/utils.ts","utils/index.ts","domain/order/utils.ts","domain/order/reducers.ts","store/index.ts","api/apiClient.ts","domain/order/api.ts","context/AppContext.ts","domain/order/hooks.ts","domain/product/components/ProductGrid.tsx","pages/OrderDetailPage.tsx","App.tsx","index.tsx"],"names":["SET_ORDER","ADD_PRODUCT","CHANGE_PRODUCT_QUANTITY","REMOVE_PRODUCT","CLEAR_ORDER","roundTo2Decimals","val","Math","round","enhanceOrder","order","convertedProductsList","items","forEach","item","p","dataProducts","dataProduct","find","dp","id","quantity","parseInt","category","description","price","parseFloat","total","enhanceOrderProduct","countOrderTotal","Object","values","reduce","prev","cur","defaultOrderState","store","configureStore","reducer","state","action","type","productId","product","productInOrder","newProductQuantity","updatedProduct","updatedItems","addProduct","newQuantity","changeProductQuantityReducer","removeProduct","preloadedState","useAppDispatch","useDispatch","useAppSelector","useSelector","ApiClient","http","basePath","get","path","opts","request","method","url","params","queryParams","then","r","data","post","this","OrderApi","api","getOrder","Promise","resolve","setTimeout","exampleOrder","submitOrder","reject","console","log","map","toString","deEnhanceOrder","Context","React","createContext","AppContextProvider","Provider","useAppContext","useContext","createAppContextApi","useInitOrder","dispatch","orderApi","useEffect","d","useOrder","isLoading","methods","productData","changeProductQuantity","ProductGrid","className","onClick","OrderProducts","products","onQuantityChange","onRemove","Row","Col","value","onChange","e","target","min","toFixed","sm","span","Button","variant","OrderDetailPage","useState","submitting","error","success","setSubmitResult","submitAction","submit","catch","useOrderSubmit","Spinner","animation","offset","disabled","Alert","App","Container","ctx","Axios","create","createAppContext","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a09829e.chunk.js","sourcesContent":["import { Product } from 'domain/product/types'\nimport { OrderState } from 'domain/order/reducers'\n\nexport const SET_ORDER = 'SET_ORDER'\nexport function setOrder(order: OrderState) {\n    return {\n        type: SET_ORDER,\n        order\n    }\n}\n\nexport const ADD_PRODUCT = 'ADD_PRODUCT'\nexport function addProduct(product: Product, quantity: number) {\n    return {\n        type: ADD_PRODUCT,\n        product,\n        quantity\n    }\n}\n\nexport const CHANGE_PRODUCT_QUANTITY = 'CHANGE_PRODUCT_QUANTITY'\nexport function changeProductQuantity(product: Product, newQuantity: number) {\n    return {\n        type: CHANGE_PRODUCT_QUANTITY,\n        product,\n        newQuantity\n    }\n}\n\nexport const REMOVE_PRODUCT = 'REMOVE_PRODUCT'\nexport function removeProduct(productId: string) {\n    return {\n        type: REMOVE_PRODUCT,\n        productId\n    }\n}\n\nexport const CLEAR_ORDER = 'CLEAR_ORDER'\nexport function clearOrder() {\n    return {\n        type: CLEAR_ORDER\n    }\n}\n","// Enhancing of Order Product to match type of provided data and use numbers where its useful\nimport { OldProduct, OrderProduct, Product } from 'domain/product/types'\n\nexport let enhanceOrderProduct = (p: OldProduct, dataProducts: Product[]): OrderProduct => {\n    const dataProduct = dataProducts.find(dp => dp.id === p['product-id'])!\n    return {\n        id: p['product-id'],\n        quantity: parseInt(p.quantity),\n        category: dataProduct.category,\n        description: dataProduct.description,\n        price: parseFloat(dataProduct.price),\n        total: parseFloat(p.total)\n    }\n}\n\n// Conversion back to provided API format\nexport let deEnhanceOrderProduct = (p: OrderProduct): OldProduct => ({\n    'product-id': p.id,\n    quantity: p.quantity.toString(),\n    'unit-price': p.price.toString(),\n    total: p.total.toString()\n})\n","export const roundTo2Decimals = (val: number) => Math.round(val * 100) / 100\r\n","import { OldOrder, Order, ProductList } from 'domain/order/types'\nimport {\n    deEnhanceOrderProduct,\n    enhanceOrderProduct\n} from 'domain/product/utils'\nimport { OldProduct } from 'domain/product/types'\nimport { roundTo2Decimals } from 'utils'\nimport dataProducts from 'data/products.json'\n\n// Enhancing order with indexed product list and products converted to useful DTO\nexport const enhanceOrder = (order: OldOrder): Order => {\n    const convertedProductsList: ProductList = {}\n    order.items.forEach(item => {\n        convertedProductsList[item['product-id']] = enhanceOrderProduct(\n            item,\n            dataProducts\n        )\n    })\n\n    return {\n        ...order,\n        total: parseFloat(order.total),\n        items: convertedProductsList\n    }\n}\n// Conversion back to provided API format\nexport const deEnhanceOrder = (order: Order): OldOrder => {\n    const convertedProductsList: OldProduct[] = Object.values(order.items).map(\n        item => deEnhanceOrderProduct(item)\n    )\n    return {\n        ...order,\n        items: convertedProductsList,\n        total: order.total.toString()\n    }\n}\n\nexport const countOrderTotal = (items: ProductList): number =>\n    roundTo2Decimals(\n        Object.values(items).reduce((prev, cur) => prev + cur.total, 0)\n    )\n","import {\n    ADD_PRODUCT,\n    CHANGE_PRODUCT_QUANTITY,\n    CLEAR_ORDER,\n    REMOVE_PRODUCT,\n    SET_ORDER\n} from 'domain/order/actions'\nimport { AnyAction } from 'redux'\nimport { Order } from 'domain/order/types'\nimport { countOrderTotal } from 'domain/order/utils'\nimport { roundTo2Decimals } from 'utils'\n\nconst addProduct = (state: OrderState, action: AnyAction) => {\n    if (!state) return state\n    const productId = action.product.id\n    const productInOrder = state.items && state.items[productId]\n    const newProductQuantity = productInOrder\n        ? productInOrder.quantity + action.quantity\n        : action.quantity\n    const updatedProduct = {\n        ...action.product,\n        price: parseFloat(action.product.price),\n        quantity: newProductQuantity,\n        total: roundTo2Decimals(action.product.price * newProductQuantity)\n    }\n    const updatedItems = { ...state.items, [productId]: updatedProduct }\n    return {\n        ...state,\n        items: updatedItems,\n        total: countOrderTotal(updatedItems)\n    }\n}\n\nconst changeProductQuantityReducer = (state: OrderState, action: AnyAction) => {\n    if (!state) return state\n    const productId = action.product.id\n    const productInOrder = state.items[productId]\n    const updatedProduct = {\n        ...productInOrder,\n        quantity: action.newQuantity,\n        total: roundTo2Decimals(productInOrder.price * action.newQuantity)\n    }\n    const updatedItems = { ...state.items, [productId]: updatedProduct }\n    return {\n        ...state,\n        items: updatedItems,\n        total: countOrderTotal(updatedItems)\n    }\n}\n\nconst removeProduct = (state: OrderState, action: AnyAction) => {\n    if (!state) return state\n    const { [action.productId]: removed, ...updatedItems } = state.items\n\n    return {\n        ...state,\n        items: updatedItems,\n        total: countOrderTotal(updatedItems)\n    }\n}\n\nexport type OrderState = Order | null | undefined\nexport const defaultOrderState: Order = {\n    id: '',\n    'customer-id': '',\n    items: {},\n    total: 0\n}\n\nexport const order = (state: OrderState, action: AnyAction) => {\n    switch (action.type) {\n        case SET_ORDER:\n            return {\n                ...state,\n                ...action.order\n            }\n        case ADD_PRODUCT:\n            return addProduct(state, action)\n        case CHANGE_PRODUCT_QUANTITY:\n            return changeProductQuantityReducer(state, action)\n        case REMOVE_PRODUCT:\n            return removeProduct(state, action)\n        case CLEAR_ORDER:\n            return defaultOrderState\n        default:\n            return state || null\n    }\n}\n","import { configureStore } from '@reduxjs/toolkit'\nimport { order } from 'domain/order/reducers'\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\n\nexport const store = configureStore({\n    reducer: {\n        order: order\n    },\n    preloadedState: {\n        order: null\n    }\n})\n\nexport type AppDispatch = typeof store.dispatch\nexport type RootState = ReturnType<typeof store.getState>\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import { AxiosInstance } from 'axios'\n\nexport type ApiOpOpts = {\n    data?: any\n    queryParams?: Record<string, string | number | null | boolean>\n}\nexport class ApiClient {\n    private basePath: string\n\n    constructor(private http: AxiosInstance) {\n        this.basePath = ''\n    }\n\n    get = <T>(path: string, opts: ApiOpOpts = {}): Promise<T> => {\n        return this.http\n            .request<T>({\n                method: 'GET',\n                url: this.basePath + path,\n                params: opts.queryParams || {}\n            })\n            .then(r => r.data)\n    }\n\n    post = <T>(path: string, opts: ApiOpOpts = { data: {} }): Promise<T> => {\n        return this.http\n            .request<T>({\n                method: 'POST',\n                url: this.basePath + path,\n                params: opts.queryParams || {},\n                data: opts.data\n            })\n            .then(r => r.data)\n    }\n}\n","import { OldOrder, Order } from 'domain/order/types'\nimport { deEnhanceOrder } from 'domain/order/utils'\nimport { ApiClient } from 'api/apiClient'\nimport exampleOrder from 'example-orders/order3.json'\n\nexport default class OrderApi {\n    private basePath = ''\n    constructor(private api: ApiClient) {}\n\n    // Real API call\n    // getOrder = () => this.api.get<OldOrder>('order')\n    getOrder = () =>\n        new Promise<OldOrder>((resolve) => {\n            setTimeout(() => {\n                resolve(exampleOrder)\n            }, 500)\n        })\n\n    // Real API call\n    // submitOrder = () => this.api.post<boolean>('order', {data: deEnhanceOrder(order)})\n    submitOrder = (order: Order) => {\n        // For testing\n        const success = true\n        return new Promise<void>((resolve, reject) => {\n            setTimeout(() => {\n                if (success) {\n                    console.log('SUBMIT', deEnhanceOrder(order))\n                    resolve()\n                } else {\n                    reject({ message: 'Error' })\n                }\n            }, 500)\n        })\n    }\n}\n","import React, { useContext } from 'react'\nimport Axios, { AxiosInstance } from 'axios'\nimport { ApiClient } from 'api/apiClient'\nimport OrderApi from 'domain/order/api'\n\nexport type AppContextType = {\n    api: ApiClient\n    orderApi: OrderApi\n    http: AxiosInstance\n}\n\nexport const createAppContext = () => {\n    const http = Axios.create()\n    const api = new ApiClient(http)\n\n    return {\n        api,\n        orderApi: new OrderApi(api),\n        http\n    }\n}\n\nexport const createAppContextApi = () => {\n    // Context is created immediately on App init, so no point in declaring type as null\n    // @ts-ignore\n    const Context = React.createContext<AppContextType>(null)\n\n    return {\n        AppContextProvider: Context.Provider,\n        useAppContext: () => useContext(Context)\n    }\n}\n\nexport const { AppContextProvider, useAppContext } = createAppContextApi()\n","import { useAppDispatch, useAppSelector } from 'store'\nimport { useEffect } from 'react'\nimport { enhanceOrder } from 'domain/order/utils'\nimport {\n    addProduct,\n    changeProductQuantity,\n    clearOrder,\n    removeProduct,\n    setOrder\n} from 'domain/order/actions'\nimport { Order } from 'domain/order/types'\nimport dataProducts from 'data/products.json'\nimport { useAppContext } from 'context/AppContext'\n\nexport const useInitOrder = () => {\n    const dispatch = useAppDispatch()\n    const { orderApi } = useAppContext()\n    useEffect(() => {\n        orderApi.getOrder().then(d => {\n            dispatch(setOrder(enhanceOrder(d)))\n        })\n    }, [dispatch, orderApi])\n}\n\nexport type AddProductAction = (productId: string, quantity: number) => void\nexport type ChangeProductQuantityAction = (\n    productId: string,\n    quantity: number\n) => void\nexport type RemoveProductAction = (productId: string) => void\nexport type SubmitOrderAction = () => Promise<void>\n\ntype UseOrder = {\n    isLoading: boolean\n    order: Order | null\n    methods: {\n        addProduct: AddProductAction\n        changeProductQuantity: ChangeProductQuantityAction\n        removeProduct: RemoveProductAction\n        submitOrder: SubmitOrderAction\n    }\n}\n\nexport const useOrder = (): UseOrder => {\n    const dispatch = useAppDispatch()\n    const order = useAppSelector(state => state.order)\n    const { orderApi } = useAppContext()\n\n    return {\n        isLoading: !order,\n        order: order,\n        methods: {\n            addProduct: (productId, quantity) => {\n                const productData = dataProducts.find(p => p.id === productId)!\n                dispatch(addProduct(productData, quantity))\n            },\n            changeProductQuantity: (productId, newQuantity) => {\n                const productData = dataProducts.find(p => p.id === productId)!\n                dispatch(changeProductQuantity(productData, newQuantity))\n            },\n            removeProduct: productId => dispatch(removeProduct(productId)),\n            submitOrder: () =>\n                orderApi.submitOrder(order).then(() => {\n                    dispatch(clearOrder())\n                })\n        }\n    }\n}\n","import dataProducts from 'data/products.json'\nimport React, { ComponentType } from 'react'\nimport { useOrder } from 'domain/order/hooks'\n\nexport const ProductGrid: ComponentType = () => {\n    const {\n        methods: { addProduct }\n    } = useOrder()\n    return (\n        <div className=\"all-products\">\n            <h2>All Products</h2>\n            <div className=\"grid\">\n                {dataProducts.map(dp => (\n                    <button\n                        aria-label={`product-${dp.id}-add`}\n                        key={dp.id}\n                        onClick={() => addProduct(dp.id, 1)}\n                    >\n                        {`${dp.description} - ${dp.price}`}\n                    </button>\n                ))}\n            </div>\n        </div>\n    )\n}\n","import React, { ComponentType, useState } from 'react'\nimport { ProductList } from 'domain/order/types'\nimport {\n    ChangeProductQuantityAction,\n    RemoveProductAction,\n    SubmitOrderAction,\n    useOrder\n} from 'domain/order/hooks'\nimport { ProductGrid } from 'domain/product/components/ProductGrid'\nimport { Alert, Button, Col, Row, Spinner } from 'react-bootstrap'\n\ntype OrderProductsProps = {\n    products: ProductList\n    onQuantityChange: ChangeProductQuantityAction\n    onRemove: RemoveProductAction\n}\n\nconst OrderProducts: ComponentType<OrderProductsProps> = ({\n    products,\n    onQuantityChange,\n    onRemove\n}) => {\n    return (\n        <div>\n            {Object.values(products).map(p => {\n                return (\n                    <Row key={p.id} className=\"mb-2\" aria-label={`product-${p.id}-row`}>\n                        <Col>\n                            <b>{p.description}</b>\n                        </Col>\n                        <Col>\n                            <input\n                                type=\"number\"\n                                value={p.quantity}\n                                aria-label={`product-${p.id}-quantity`}\n                                onChange={e => {\n                                    const val = parseInt(e.target.value)\n                                    if (val > 0) onQuantityChange(p.id, val)\n                                }}\n                                min=\"1\"\n                            />\n                        </Col>\n                        <Col>Unit price: {p.price.toFixed(2)}</Col>\n                        <Col>Total price: {p.total.toFixed(2)}</Col>\n                        <Col sm={{ span: 2 }}>\n                            <Button\n                                variant=\"danger\"\n                                onClick={() => onRemove(p.id)}\n                                aria-label={`product-${p.id}-remove`}\n                            >\n                                REMOVE\n                            </Button>\n                        </Col>\n                    </Row>\n                )\n            })}\n        </div>\n    )\n}\n\nconst useOrderSubmit = () => {\n    const [{ success, error, submitting }, setSubmitResult] = useState({\n        submitting: false,\n        error: false,\n        success: false\n    })\n    const submitAction = (submit: SubmitOrderAction) => {\n        setSubmitResult({\n            submitting: true,\n            success: false,\n            error: false\n        })\n        submit()\n            .then(() =>\n                setSubmitResult({\n                    submitting: false,\n                    success: true,\n                    error: false\n                })\n            )\n            .catch(() =>\n                setSubmitResult({\n                    submitting: false,\n                    success: false,\n                    error: true\n                })\n            )\n    }\n    return {\n        submitting,\n        success,\n        error,\n        submitAction\n    }\n}\n\nexport const OrderDetailPage: ComponentType = () => {\n    const {\n        order,\n        isLoading,\n        methods: { changeProductQuantity, removeProduct, submitOrder }\n    } = useOrder()\n    const { submitting, success, error, submitAction } = useOrderSubmit()\n\n    return (\n        <div>\n            <h1>Order Detail</h1>\n            {isLoading && <Spinner animation=\"border\" />}\n            {order && (\n                <div>\n                    <OrderProducts\n                        products={order.items}\n                        onQuantityChange={changeProductQuantity}\n                        onRemove={removeProduct}\n                    />\n                    <Row className=\"mb-2\">\n                        <Col sm={{ offset: 8 }}>\n                            <b>Total: {order.total.toFixed(2)}</b>\n                        </Col>\n                        <Col className=\"submit-panel\">\n                            {submitting && <Spinner animation=\"border\" />}\n                            {!submitting && (\n                                <Button\n                                    disabled={order.total === 0}\n                                    onClick={() => submitAction(submitOrder)}\n                                >\n                                    SUBMIT\n                                </Button>\n                            )}\n                        </Col>\n                    </Row>\n                    <div>\n                        {success && <Alert variant=\"success\">Order was submitted!</Alert>}\n                        {error && <Alert variant=\"danger\">Error occurred during order submission</Alert>}\n                    </div>\n                </div>\n            )}\n            <ProductGrid />\n        </div>\n    )\n}\n","import React, { ComponentType } from 'react'\nimport 'style/App.scss'\nimport { OrderDetailPage } from 'pages/OrderDetailPage'\nimport { useInitOrder } from 'domain/order/hooks'\nimport { Container } from 'react-bootstrap'\n\nconst App: ComponentType = () => {\n    useInitOrder()\n    return (\n        <Container>\n            <OrderDetailPage />\n        </Container>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport 'style/index.css'\nimport { Provider } from 'react-redux'\nimport { store } from 'store'\nimport ReactDOM from 'react-dom'\nimport App from 'App'\nimport { AppContextProvider, createAppContext } from 'context/AppContext'\n\nconst ctx = createAppContext()\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <AppContextProvider value={ctx}>\n                <App />\n            </AppContextProvider>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}